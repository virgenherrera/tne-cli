import { ExpressApplication, joiValidate, IPagedDto } from '@tne/express-app';
import { Routes } from '../config/routes';
import { <%- className%>, <%- className%>ListFilters } from '../poco/<%- fileName%>';
import { <%- className%>Repository } from '../repository/<%- fileName%>';
import * as <%- functionName%>Schema from '../validator/<%- fileName%>';

export class <%- className%>Controller {
	async createAction(params: any): Promise<<%- className%>> {
		const dto = joiValidate(params, <%- functionName%>Schema.create);
		const poco = new <%- className%>(dto);
		const repository = new <%- className%>Repository;

		return await repository.Create(poco);
	}

	async deleteAction(params: any): Promise<<%- className%>> {
		const { id, softDelete } = joiValidate(params, <%- functionName%>Schema.remove);
		const repository = new <%- className%>Repository;

		return await repository.Delete(id, softDelete);
	}

	async editAction(params: any): Promise<<%- className%>> {
		const dto = joiValidate(params, <%- functionName%>Schema.update);
		const poco = new <%- className%>(dto);
		const repository = new <%- className%>Repository;

		return await repository.Update(poco);
	}

	async listAction({ <%- attrKeys.join(', ') %>, sort, page, per_page }): Promise<IPagedDto<<%- className%>>> {
		const uri = ExpressApplication.instance.buildUrl(Routes.<%- plural%>);
		const dto = joiValidate({ <%- attrKeys.join(', ') %> }, <%- functionName%>Schema.list);
		const filters = new <%- className%>ListFilters(dto, sort, page, per_page);
		const repository = new <%- className%>Repository;
		const { count, rows } = await repository.GetAll(filters);
		const { queryStringArgs } = filters;

		return { uri, rows, count, page, per_page, queryStringArgs };
	}

	async showAction(params: any): Promise<<%- className%>> {
		const { id } = joiValidate(params, <%- functionName%>Schema.find);
		const repository = new <%- className%>Repository;

		return await repository.GetById(id);
	}
}
